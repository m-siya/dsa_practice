use std::{collections::HashMap, ops::Range};

#[derive(Clone)]
enum Scramble {
    End(u8),                   // consists of a single ASCII letter.
    Combination(usize, usize), // indicates the indexes of the `Scramble`s that must be concatenated to make this Scramble.
}
impl Solution {
    pub fn is_scramble(s1: String, s2: String) -> bool {
        let mut dp = HashMap::new();
        let mut solns = Vec::<Scramble>::new();

        if s1.len() == 1 {
            return s1 == s2;
        }

        let scrambles = Self::get_scrambles(&s1, &mut solns, &mut dp);
        for scramble in scrambles {
            let mut answer = String::new();
            Self::generate_scramble(scramble, &solns, &mut answer);
            if answer == s2 {
                return true;
            }
        }

        false
    }

    fn get_scrambles<'a, 'b>(
        substr: &'a str,
        solns: &'b mut Vec<Scramble>,
        dp: &'b mut HashMap<&'a str, Range<usize>>,
    ) -> Range<usize> {
        // println!("Called on {substr:?}");
        if let Some(soln) = dp.get(substr) {
            // println!("Found it in dp.. it's result is in {soln:?}");
            return soln.clone();
        }

        if substr.len() == 0 {
            // println!("Found an empty string for some reason??");
            return solns.len()..solns.len();
        }
        if substr.len() == 1 {
            solns.push(Scramble::End(substr.as_bytes()[0]));
            dp.insert(substr, solns.len() - 1..solns.len());
            return solns.len() - 1..solns.len();
        }
        let mut ans = vec![];
        for i in 1..substr.len() {
            let (substr1, substr2) = substr.split_at(i);
            let scrambles1 = Self::get_scrambles(substr1, solns, dp);
            let scrambles2 = Self::get_scrambles(substr2, solns, dp);
            for scr1 in scrambles1 {
                for scr2 in scrambles2.clone() {
                    ans.push(Scramble::Combination(scr1, scr2));
                    ans.push(Scramble::Combination(scr2, scr1));
                }
            }
        }
        let start = solns.len();
        solns.extend(ans);
        dp.insert(substr, start..solns.len());

        start..solns.len()
    }

    fn generate_scramble(scramble: usize, solns: &[Scramble], answer: &mut String) {
        match solns[scramble] {
            Scramble::End(c) => answer.push(c as char),
            Scramble::Combination(left_scramble, right_scramble) => {
                Self::generate_scramble(left_scramble, solns, answer);
                Self::generate_scramble(right_scramble, solns, answer);
            }
        }
    }
}
